// scss-lint:disable QualifyingElement

//
// Textual form controls
//

// Marking .form-control for deprecation
// however, there are alot of useful styling tricks in here
// leaving in for now until the app matures past needing to reference these tricks
.form-control {
  display: block;
  width: 100%;
  // // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  // height: $input-height;
  padding-bottom: ($font-size-base * .5);
  //font-size: ($font-size-base * 1.2);
  //line-height: $input-line-height;
  color: $input-color;
  font-weight: 300;
  background-color: transparent;
  // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214.
  background-image: none;
  background-clip: padding-box;
  border: none;
  border-bottom-width: $input-border-width;
  border-bottom-style: solid;
  border-bottom-color: $input-border-color;
  // overflow: auto;
  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @include box-shadow($input-box-shadow);
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }
  &:focus {
    border-bottom-color: $input-border-focus;
    outline: none;
    & + .input-label {
      color: $input-border-focus;
      @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);
    }
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  &::placeholder {
    color: $input-color-placeholder;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-bg-disabled;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  &:disabled {
    cursor: $cursor-disabled;
  }
}

select.form-control {
  &:not([size]):not([multiple]) {
    height: $input-height;
  }

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;
    outline: none;
  }
}


// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
  display: block;
}

//
// error
//
.has-error {
  border-bottom-color: $input-border-color;
  &:focus {
    border-bottom-color: $input-border-color;
  }
}

//
// Labels
//
.input-label {
  color: $black;
  font-size: .9rem;
  font-weight: 400;
  margin-bottom: 4px;
}

.input-label-md {
  font-size: 1rem;
}


// in order for the label to change color when the input is selected,
// the label must come after the input in the DOM
// however, we may want the label to come before the input
// to achieve this, we set either the input or label to have class
// form-control-top and the other to have form-control-bottom
// both must exist in a div with the styles position: 'relative',
// and a set height
.form-control-top {
  top: 0;
  position: absolute;
}

.form-control-bottom {
  bottom: 0;
  position: absolute
}

.form-control-wrap-sm {
  position: relative;
  height: 60px
}

.form-control-wrap-md {
  position: relative;
  height: 150px
}

.form-control-wrap-lg {
  position: relative;
  height: 280px
}

// For use with horizontal and inline forms, when you need the label text to
// align with the form controls.
.col-form-label {
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  margin-bottom: 0; // Override the `<label>` default
}

.col-form-label-lg {
  padding-top: $input-padding-y-lg;
  padding-bottom: $input-padding-y-lg;
  font-size: $font-size-lg;
}

.col-form-label-sm {
  padding-top: $input-padding-y-sm;
  padding-bottom: $input-padding-y-sm;
  font-size: $font-size-sm;
}


//
// Legends
//

// For use with horizontal and inline forms, when you need the legend text to
// be the same size as regular labels, and to align with the form controls.
.col-form-legend {
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  margin-bottom: 0;
  font-size: $font-size-base;
}


// Static form control text
//
// Apply class to an element to make any string of text align with labels in a
// horizontal form layout.

.form-control-static {
  min-height: $input-height;
  // Size it appropriately next to real form controls
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  // Remove default margin from `p`
  margin-bottom: 0;

  &.form-control-sm,
  &.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

.form-control-sm {
  padding: $input-padding-y-sm $input-padding-x-sm;
  font-size: $font-size-sm;
  @include border-radius($input-border-radius-sm);
}

select.form-control-sm {
  &:not([size]):not([multiple]) {
    height: $input-height-sm;
  }
}

.form-control-lg {
  padding: $input-padding-y-lg $input-padding-x-lg;
  font-size: $font-size-lg;
  @include border-radius($input-border-radius-lg);
}

select.form-control-lg {
  &:not([size]):not([multiple]) {
    height: $input-height-lg;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}

.form-text {
  display: block;
  margin-top: ($spacer * .25);
}

// Form Wrap
//
// style used to wrap forms
.form-wrap {
  margin-bottom: 20px;
  padding: 10px;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-check {
  position: relative;
  display: block;
  margin-bottom: ($spacer * .75);

  // Move up sibling radios or checkboxes for tighter spacing
  + .form-check {
    margin-top: -.25rem;
  }

  &.disabled {
    .form-check-label {
      color: $text-muted;
      cursor: $cursor-disabled;
    }
  }
}

.form-check-label {
  padding-left: 1.25rem;
  margin-bottom: 0; // Override default `<label>` bottom margin
  cursor: pointer;
}

.form-check-input {
  position: absolute;
  margin-top: .25rem;
  margin-left: -1.25rem;

  &:only-child {
    position: static;
  }
}

// Radios and checkboxes on same line
.form-check-inline {
  position: relative;
  display: inline-block;
  padding-left: 1.25rem;
  margin-bottom: 0; // Override default `<label>` bottom margin
  vertical-align: middle;
  cursor: pointer;

  + .form-check-inline {
    margin-left: .75rem;
  }

  &.disabled {
    cursor: $cursor-disabled;
  }
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.form-control-feedback {
  margin-top: ($spacer * .25);
}

.form-control-success,
.form-control-warning,
.form-control-danger {
  padding-right: ($input-padding-x * 3);
  background-repeat: no-repeat;
  background-position: center right ($input-height / 4);
  background-size: ($input-height / 2) ($input-height / 2);
}

// Form validation states
.has-success {
  @include form-control-validation($success);

  .form-control-success {
    background-image: $form-icon-success;
  }
}

.has-warning {
  @include form-control-validation($primary-dark);

  .form-control-warning {
    background-image: $form-icon-warning;
  }
}

.has-danger {
  @include form-control-validation($error);

  .form-control-danger {
    background-image: $form-icon-danger;
  }
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {

  // Kick in the inline
  @include media-breakpoint-up(sm) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .form-control-label {
      color: $primary-light;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-check {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;
    }
    .form-check-label {
      padding-left: 0;
    }
    .form-check-input {
      position: relative;
      margin-left: 0;
    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}


//
// Radio button Variants:
//

.radio-primary {
  @include radio-variant($primary, $primary-light)
}

.radio-primary-muted {
  @include radio-variant($button, $primary-light)
}

// Help Hints
//
// Help Hints appear underneath an input and describe what is needed in that particular field
//
//
.help_hint {
  font-size: $font-size-sm;
  color: $primary-light;
}

// custom input styles
.input {
  transition: all 100ms;
  display: inline-block;
  border: $border-color solid 1px;
  width: 100%;
  padding: 7px;
  border-radius: 5px;
  background-image: none;
  background: $white;
  background-clip: padding-box;
}

.react-select>div {
  border: $border-color solid 1px;
}

.input:hover {
  border-color: #0061a682;
}

.input:active,
.input:focus {
  outline: none;
  border-color: #0061a682;
}

select.input {
  &:not([size]):not([multiple]) {
    height: $input-height;
  }

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;
    outline: none;
  }
}

button.input {
  -moz-transition: all .2s ease-in;
  -o-transition: all .2s ease-in;
  -webkit-transition: all .2s ease-in;
  transition: all .2s ease-in;
  color: $primary;
  border: none;
  cursor: pointer;
  &:hover {
    color: $primary-dark;
  }
}

input#path, input#bodyPath {
  min-width: 250px;
}

// MultiTextInput (tags UI)
.multi-text-input {
  .tag {
    background: $primary-dark;
    border-radius: 4px;
    padding: 4px 8px;
    margin: 5px;
    display: inline-block;
    color: white;
    font-weight: 700;

    .tag-text {
      flex: 1;
    }

    .tag-remove {
      flex: 0;
      padding-left: 7px;
    }
  }

  .tag-input {
    max-width: 180px;
    display: inline-block;
  }
}

// MultiStructuredInput

.subform-container {
  border: 1px solid $border-color;
  padding: 15px;
}

.multi-structured-input-container {
  table {
    table-layout: fixed;
    width: 100%;
    margin: 10px;
  }
  th {
    font-weight: 500;
    padding: 0;
    margin-bottom: 9px;
    border-bottom: 1px solid $border-color
  }
  tr td {
    padding-top: 5px;
  }

  .add-item {
    font-weight: 300;
    font-size: .9rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;

    .disabled {
      cursor: default;
      color: #eeeeee;
    }
  }

  .remove-column, .handle-column {
    width: 10px;
    text-align: right;
    display: flex;
    padding-top: 10px;
    flex-direction: column;
    justify-content: center;
  }
  .remove-col {
    width: 30px;
  }

  .header-row {
    font-weight: 500;
    padding: 0;
    margin-bottom: 9px;
    border-bottom: 1px solid $border-color
  }
}
